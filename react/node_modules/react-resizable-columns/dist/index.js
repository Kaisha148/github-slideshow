'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./css/resizableColumns.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResizableColumns = function (_React$Component) {
    _inherits(ResizableColumns, _React$Component);

    function ResizableColumns(props) {
        _classCallCheck(this, ResizableColumns);

        var _this = _possibleConstructorReturn(this, (ResizableColumns.__proto__ || Object.getPrototypeOf(ResizableColumns)).call(this, props));

        _this.state = {
            isResizing: false,
            lastDownX: 0,
            offset: 0,
            minOffset: 300
        };
        return _this;
    }

    _createClass(ResizableColumns, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var handle = document.querySelector('.colResizeHandle');
            var container = document.getElementById('colResizeWrapper');
            var offset = container.offsetWidth - 300;

            var self = this;
            self.setState({
                offset: offset
            });

            handle.addEventListener("mousedown", function (e) {
                self.setState({
                    isResizing: true,
                    lastDownX: e.clientX
                });
            });

            document.addEventListener('mousemove', function (e) {
                if (!self.state.isResizing) return;
                var offset = container.offsetWidth - (e.clientX - container.offsetLeft);
                self.setState({
                    offset: offset <= self.state.minOffset ? self.state.minOffset : offset
                });
            });
            document.addEventListener('mouseup', function () {
                self.setState({
                    isResizing: false
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            if (this.props.children) return _react2.default.createElement(
                'div',
                { className: 'colResizeWrapper', id: 'colResizeWrapper' },
                _react2.default.createElement(
                    'div',
                    { className: 'colResizeLeft',
                        style: { right: this.state.offset } },
                    _react2.default.createElement(
                        'div',
                        { className: 'colResizeFullCol' },
                        this.props.children[0]
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'colResizeRight', style: { width: this.state.offset } },
                    _react2.default.createElement('div', { className: 'colResizeHandle' }),
                    _react2.default.createElement(
                        'div',
                        { style: { overflowY: 'auto' } },
                        this.props.children[1]
                    )
                )
            );else return _react2.default.createElement(_react2.default.Fragment, null);
        }
    }]);

    return ResizableColumns;
}(_react2.default.Component);

exports.default = ResizableColumns;